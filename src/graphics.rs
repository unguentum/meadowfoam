use core::fmt;

pub const FONT_WIDTH : usize = 5;
pub const FONT_HEIGHT : usize = 7;

pub const FONT_DATA : [[u32; 7]; 94] = [[4, 4, 4, 0, 4, 0, 0], [10, 10, 0, 0, 0, 0, 0], [10, 31, 10, 31, 10, 0, 0], [14, 20, 14, 5, 14, 0, 0], [25, 18, 4, 9, 19, 0, 0], [14, 24, 21, 18, 13, 0, 0], [4, 4, 0, 0, 0, 0, 0], [4, 8, 8, 8, 4, 0, 0], [4, 2, 2, 2, 4, 0, 0], [10, 4, 10, 0, 0, 0, 0], [0, 4, 14, 4, 0, 0, 0], [0, 0, 0, 4, 4, 0, 0], [0, 0, 14, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0], [2, 4, 4, 4, 8, 0, 0], [4, 10, 10, 10, 4, 0, 0], [4, 12, 4, 4, 14, 0, 0], [4, 10, 2, 4, 14, 0, 0], [12, 2, 12, 2, 12, 0, 0], [2, 6, 10, 14, 2, 0, 0], [14, 8, 12, 2, 12, 0, 0], [4, 8, 12, 10, 4, 0, 0], [14, 2, 4, 8, 8, 0, 0], [4, 10, 4, 10, 14, 0, 0], [6, 10, 6, 2, 12, 0, 0], [0, 0, 4, 0, 4, 0, 0], [0, 4, 0, 4, 4, 0, 0], [0, 6, 8, 6, 0, 0, 0], [0, 14, 0, 14, 0, 0, 0], [0, 12, 2, 12, 0, 0, 0], [12, 10, 2, 4, 0, 4, 0], [14, 17, 21, 27, 20, 17, 14], [4, 10, 14, 10, 10, 0, 0], [12, 10, 14, 10, 14, 0, 0], [6, 8, 8, 8, 6, 0, 0], [12, 10, 10, 10, 12, 0, 0], [14, 8, 12, 8, 14, 0, 0], [14, 8, 12, 8, 8, 0, 0], [14, 16, 22, 18, 14, 0, 0], [10, 10, 14, 10, 10, 0, 0], [4, 4, 4, 4, 4, 0, 0], [4, 4, 4, 4, 20, 12, 0], [10, 10, 12, 10, 10, 0, 0], [8, 8, 8, 8, 14, 0, 0], [17, 27, 21, 17, 17, 0, 0], [17, 25, 21, 19, 17, 0, 0], [14, 17, 17, 17, 14, 0, 0], [12, 10, 14, 8, 8, 0, 0], [14, 17, 21, 19, 13, 0, 0], [12, 10, 12, 10, 10, 0, 0], [6, 8, 12, 2, 12, 0, 0], [14, 4, 4, 4, 4, 0, 0], [10, 10, 10, 10, 4, 0, 0], [17, 10, 10, 4, 4, 0, 0], [17, 17, 17, 21, 10, 0, 0], [17, 10, 4, 10, 17, 0, 0], [10, 4, 4, 4, 4, 0, 0], [31, 2, 4, 8, 31, 0, 0], [14, 8, 8, 8, 14, 0, 0], [8, 4, 4, 4, 2, 0, 0], [14, 2, 2, 2, 14, 0, 0], [4, 10, 0, 0, 0, 0, 0], [0, 0, 0, 0, 14, 0, 0], [4, 2, 0, 0, 0, 0, 0], [0, 12, 6, 10, 14, 0, 0], [8, 8, 12, 10, 12, 0, 0], [0, 0, 6, 8, 6, 0, 0], [2, 2, 6, 10, 6, 0, 0], [4, 10, 14, 8, 6, 0, 0], [6, 4, 14, 4, 4, 0, 0], [0, 0, 6, 10, 6, 2, 6], [8, 8, 12, 10, 10, 0, 0], [0, 4, 0, 4, 4, 0, 0], [4, 0, 4, 4, 4, 20, 8], [8, 8, 10, 12, 10, 0, 0], [4, 4, 4, 4, 6, 0, 0], [0, 0, 26, 21, 21, 0, 0], [0, 0, 12, 10, 10, 0, 0], [0, 0, 4, 10, 12, 0, 0], [0, 0, 12, 10, 12, 8, 8], [0, 0, 6, 10, 6, 2, 2], [0, 0, 12, 10, 8, 0, 0], [6, 8, 4, 2, 12, 0, 0], [4, 14, 4, 4, 6, 0, 0], [0, 0, 10, 10, 6, 0, 0], [0, 0, 10, 10, 4, 0, 0], [0, 0, 21, 21, 10, 0, 0], [0, 0, 10, 4, 10, 0, 0], [0, 0, 10, 10, 4, 4, 8], [0, 14, 2, 4, 14, 0, 0], [6, 4, 12, 4, 6, 0, 0], [4, 4, 4, 4, 4, 0, 0], [12, 4, 6, 4, 12, 0, 0], [0, 0, 24, 21, 3, 0, 0]];

pub struct ScreenWriter<'a> {
	cursor_x : usize,
	cursor_y : usize,
	frame_buffer : &'a mut [u32],
	pixels_per_line : usize,
}

impl fmt::Write for ScreenWriter<'_> {
	fn write_str(&mut self, string : &str) -> fmt::Result {
		for c in string.chars() {
			match c {
				'\n' => { 
					self.new_line();
				}
				_ => {
					self.output_char(c);
					self.cursor_x += 1;
					if self.cursor_x * FONT_WIDTH > self.pixels_per_line - FONT_WIDTH {
						self.new_line();
					}
				}
			}
		}
		Ok(())
	}
}

impl ScreenWriter<'_> {
	pub fn new_line(&mut self) {
		self.cursor_x = 0;
		self.cursor_y += 1;
	}
	pub fn new(frame_buffer : &mut [u32], pixels_per_line : usize) -> ScreenWriter {
		ScreenWriter {
			cursor_x : 0,
			cursor_y : 0,
			frame_buffer : frame_buffer,
			pixels_per_line : pixels_per_line,
		}
	}
	fn output_char(&mut self, c : char) {
		if !c.is_ascii() {
			return;
		}
		let c = c as u8;
		if c < b'!' || c > b'~' {
			return;
		}
		let pos_x = self.cursor_x * FONT_WIDTH;
		let pos_y = self.cursor_y * FONT_HEIGHT;
		for dy in 0..FONT_HEIGHT {
			for dx in 0..FONT_WIDTH {
				let color = if (FONT_DATA[(c-b'!') as usize][dy] & (1 << (FONT_WIDTH - 1 - dx))) != 0 { 0xFFFFFF } else { 0 };
				let x = pos_x + dx;
				let y = pos_y + dy;
				self.frame_buffer[x + y * self.pixels_per_line] = color;
			}
		}
	}
}
